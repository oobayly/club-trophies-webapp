rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
  	function isAdmin() {
    	return request.auth != null
      	&& request.auth.token.roles != null
        && "admin" in request.auth.token.roles;
    }
    
    function isClubPublic(clubId) {
    	return exists(/databases/$(database)/documents/clubs/$(clubId))
      	&& get(/databases/$(database)/documents/clubs/$(clubId)).data.public;
    }
    
    function isTrophyPublic(clubId, trophyId) {
    	return exists(/databases/$(database)/documents/clubs/$(clubId)/trophies/$(trophyId))
      	&& get(/databases/$(database)/documents/clubs/$(clubId)/trophies/$(trophyId)).data.public;
    }    

    function isClubAdmin(clubId) {
    	return request.auth != null
      	&& exists(/databases/$(database)/documents/clubs/$(clubId))
      	&& request.auth.uid in get(/databases/$(database)/documents/clubs/$(clubId)).data.admins;
    }
 
 		// Admins skip all rules
    match /{document=**} {
      allow read, write: if isAdmin();
    }

    // All boats are readable
    match /{path=**}/boats/{boatId} {
      allow read: if true;
    }

    match /boats/{boatId} {
      allow write: if isAdmin();
    }
    
  	match /clubs/{clubId} {
    	// Anyone can view public clubs
    	allow read: if resource != null
      	&& resource.data.public == true;
      
      match /boats/{boatId} {
        // The boats are readable, provided the club is public
        allow read: if resource != null
          && isClubPublic(clubId);
        // Boats can't be deleted, only archived
      	allow delete: if false;
      }
      
      // Anyone authenticated user can create a club, but they must be the admin
      allow create: if request.auth != null
        && request.resource.data.admins != null
      	&& request.auth.uid in request.resource.data.admins;
        
      // Club admins can edit their club
      allow read, write: if request.auth != null
      	&& request.auth.uid in resource.data.admins;

      // Any sub documents can be read, created, updated but not deleted
      match /{document=**} {
        allow delete: if false;
      	allow read, write: if isClubAdmin(clubId);
      }
      
      match /admins/{id} {
      	// Any authenticated user can read and delete their own admin requests
      	allow read, delete: if request.auth != null
        	&& resource.data.uid == request.auth.uid;

      	// Any authenticated user can create a request, provided the club is public, but it can't be enabled
      	allow create: if request.auth != null
        	&& request.resource.data.uid == request.auth.uid
          && request.resource.data.enabled == false
        	&& isClubPublic(clubId);
      }

      match /trophies/{trophyId} {
        // Anyone can view public trophies, provided the club is also public
	    	allow read: if isClubPublic(clubId) && resource != null && resource.data.public == true;

        match /{document=**} {
          allow read: if isClubPublic(clubId) && isTrophyPublic(clubId, trophyId);          
        }
      }
    }

    match /searches/{searchId} {
      allow get: if request.auth == null && resource.data.uid == null; // Unauthenticated can only read anonymous searches
      allow get: if request.auth != null && request.auth.uid == resource.data.uid; // Authenticated can only read their own searches
      allow create: if request.resource != null && request.auth == null; // Anonymous can create search
      allow create: if request.resource != null && request.auth != null && request.resource.data.uid == request.auth.uid; // Authenticated must include their uid

      match /results/{resultId} {
        allow read: if true;
      }
    }
  
  	match /{document=**} {
      allow read, write: if false;
    }
  }
}
